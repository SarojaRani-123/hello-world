name: 7-Step Deployment with API-wise Deployment
 
on:
  workflow_dispatch:
    inputs:
      client:
        description: "Client name (e.g., client1)"
        required: true
      env:
        description: "Environment (pp, prod, qa)"
        required: true
      version:
        description: "Artifact version (e.g., v8.2025.06)"
        required: true
 
jobs:
  deploy:
    runs-on: windows-latest
 
    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
 
      # 2Ô∏è‚É£ Load client config
      - name: Load Client Config
        shell: pwsh
        run: |
          $client = "${{ github.event.inputs.client }}"
          $envName = "${{ github.event.inputs.env }}"
          $configPath = ".\configs\$client\$envName\config.json"
 
          if (Test-Path $configPath) {
            Write-Host "‚úÖ Config loaded for $client in $envName environment"
            $config = Get-Content $configPath | ConvertFrom-Json
            Write-Host "App Root Path: $($config.appRootPath)"
            Write-Host "APIs: $($config.apiNames -join ', ')"
            # Export values for later steps
            $config | ConvertTo-Json -Compress | Out-File -FilePath $env:TEMP\clientConfig.json
          }
          else {
            Write-Host "‚ùå Config not found for $client in $envName environment"
            exit 1
          }
 
      # 3Ô∏è‚É£ Set artifact version from workflow input
      - name: Set Artifact Version
        shell: pwsh
        run: |
          $version = "${{ github.event.inputs.version }}"
          Write-Host "Artifact version set to $version"
          echo "ARTIFACT_VERSION=$version" >> $env:GITHUB_ENV
 
      # 4Ô∏è‚É£ Extract artifact ZIPs from version folder (recursively)
      - name: Extract Artifacts
        shell: pwsh
        run: |
          $version = "${{ env.ARTIFACT_VERSION }}"
          $artifactFolder = "./artifacts/artifacts_$version"
 
          if (-Not (Test-Path $artifactFolder)) {
            Write-Host "‚ùå Artifact folder not found: $artifactFolder"
            exit 1
          }
 
          $extractPath = "$env:TEMP\artifact_extract_$($env:GITHUB_RUN_ID)"
          if (Test-Path $extractPath) { Remove-Item -Recurse -Force $extractPath }
          New-Item -ItemType Directory -Force -Path $extractPath | Out-Null
 
          Write-Host "üì¶ Extracting all .zip files from $artifactFolder to $extractPath"
          $zips = Get-ChildItem -Path $artifactFolder -Recurse -Filter *.zip
          foreach ($zip in $zips) {
            $targetDir = Join-Path $extractPath ($zip.BaseName)
            New-Item -ItemType Directory -Force -Path $targetDir | Out-Null
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::ExtractToDirectory($zip.FullName, $targetDir)
            Write-Host "‚úÖ Extracted $($zip.Name) -> $targetDir"
          }
 
      # 5Ô∏è‚É£ Deploy APIs dynamically to IIS paths
      - name: Deploy APIs to Local IIS
        shell: pwsh
        run: |
          $config = Get-Content $env:TEMP\clientConfig.json | ConvertFrom-Json
          $iisRoot = $config.appRootPath
          $extractPath = "$env:TEMP\artifact_extract_$($env:GITHUB_RUN_ID)"
 
          if (-Not (Test-Path $iisRoot)) {
            New-Item -ItemType Directory -Path $iisRoot | Out-Null
          }
 
          foreach ($api in $config.apiNames) {
            $sourcePath = Join-Path $extractPath $api
            $destPath = Join-Path $iisRoot $api
 
            if (-Not (Test-Path $sourcePath)) {
              Write-Host "‚ö†Ô∏è Skipping $api because no extracted folder found"
              continue
            }
 
            if (-Not (Test-Path $destPath)) {
              New-Item -ItemType Directory -Path $destPath | Out-Null
            }
 
            Write-Host "üöÄ Deploying API '$api' from '$sourcePath' to '$destPath'"
            # Dummy copy, replace with MSDeploy if required
            Copy-Item -Path "$sourcePath\*" -Destination $destPath -Recurse -Force
          }
 
      # 6Ô∏è‚É£ Post-deployment step (placeholder)
      - name: Post Deployment Step
        run: Write-Host "Post-deployment step executed"
 
      # 7Ô∏è‚É£ Deployment complete
      - name: Deployment Complete
        run: Write-Host "‚úÖ Deployment complete for client ${{ github.event.inputs.client }} (env=${{ github.event.inputs.env }}) version ${{ env.ARTIFACT_VERSION }}"
