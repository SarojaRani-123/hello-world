name: 7-Step Deployment with API-wise Deployment
 
on:
  workflow_dispatch:
    inputs:
      client:
        description: 'Client name (e.g., client1)'
        required: true
      env:
        description: 'Environment (pp, prod, qa)'
        required: true
      version:
        description: 'Artifact version (e.g., v8.2025.06)'
        required: true
 
jobs:
  deploy:
    runs-on: windows-latest
 
    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
 
      # 2️⃣ Load client config
      - name: Load Client Config
        shell: pwsh
        run: |
          $client = "${{ github.event.inputs.client }}"
          $envName = "${{ github.event.inputs.env }}"
          $configPath = ".\configs\$client\$envName\config.json"
 
          if (Test-Path $configPath) {
              Write-Host "Config loaded for $client in $envName environment"
              $config = Get-Content $configPath | ConvertFrom-Json
              Write-Host "App Root Path: $($config.appRootPath)"
              Write-Host "APIs: $($config.apiNames -join ', ')"
          } else {
              Write-Host "Config not found for $client in $envName environment"
              exit 1
          }
 
      # 3️⃣ Set artifact version from workflow input
      - name: Set Artifact Version
        shell: pwsh
        run: |
          $version = "${{ github.event.inputs.version }}"
          Write-Host "Artifact version set to $version"
          echo "ARTIFACT_VERSION=$version" >> $env:GITHUB_ENV
 
      # 4️⃣ Extract artifact ZIP from repo (clean folder first)
      - name: Extract Artifact ZIP
        shell: pwsh
        run: |
          $version = "${{ env.ARTIFACT_VERSION }}"
          $zipPath = "./artifacts/artifacts_$version.zip"
          $extractPath = "./artifacts/extracted"
 
          if (-Not (Test-Path $zipPath)) {
              Write-Host "❌ Artifact ZIP not found: $zipPath"
              exit 1
          }
 
          # Remove existing folder to avoid access denied errors
          if (Test-Path $extractPath) {
              Remove-Item -Recurse -Force $extractPath
          }
 
          # Create folder
          New-Item -ItemType Directory -Force -Path $extractPath
 
          # Extract ZIP
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $extractPath)
 
          Write-Host "✅ Artifact $zipPath extracted to $extractPath"
 
      # 5️⃣ Deploy APIs dynamically to their paths
      - name: Deploy APIs to Local IIS
        shell: pwsh
        run: |
          $iisRoot = $config.appRootPath
          if (-Not (Test-Path $iisRoot)) { New-Item -ItemType Directory -Path $iisRoot }
 
          foreach ($api in $config.apiNames) {
              $sourcePath = "./artifacts/extracted/$api"
              $destPath = Join-Path $iisRoot $api
              if (-Not (Test-Path $destPath)) { New-Item -ItemType Directory -Path $destPath }
              Write-Host "Deploying API '$api' from '$sourcePath' to '$destPath'"
              # Dummy copy, replace with MSDeploy for real deployment
              Copy-Item -Path "$sourcePath\*" -Destination $destPath -Recurse -Force
          }
 
      # 6️⃣ Post-deployment step (placeholder)
      - name: Post Deployment Step
        run: Write-Host "Post-deployment step executed"
 
      # 7️⃣ Deployment complete
      - name: Deployment Complete
        run: Write-Host "✅ Deployment simulation complete for client ${{ github.event.inputs.client }} version ${{ env.ARTIFACT_VERSION }}"
