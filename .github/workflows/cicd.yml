name: 7-Step Deployment with API-wise Deployment
 
on:
  workflow_dispatch:
    inputs:
      client:
        description: 'Client name (e.g., client1)'
        required: true
      env:
        description: 'Environment (pp, prod, qa)'
        required: true
      version:
        description: 'Artifact version (e.g., v8.2025.06)'
        required: true
 
jobs:
  deploy:
    runs-on: windows-latest
    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
 
      # 2Ô∏è‚É£ Load client config
      - name: Load Client Config
        shell: pwsh
        run: |
          $client = "${{ github.event.inputs.client }}"
          $envName = "${{ github.event.inputs.env }}"
          $configPath = ".\configs\$client\$envName\config.json"
 
          if (Test-Path $configPath) {
            Write-Host "Config loaded for $client in $envName environment"
            $config = Get-Content $configPath | ConvertFrom-Json
            Write-Host "App Root Path: $($config.appRootPath)"
            Write-Host "APIs: $($config.apiNames -join ', ')"
          }
          else {
            Write-Host "‚ùå Config not found for $client in $envName environment"
            exit 1
          }
 
      # 3Ô∏è‚É£ Set artifact version from workflow input
      - name: Set Artifact Version
        shell: pwsh
        run: |
          $version = "${{ github.event.inputs.version }}"
          Write-Host "Artifact version set to $version"
          echo "ARTIFACT_VERSION=$version" >> $env:GITHUB_ENV
 
      # 4Ô∏è‚É£ Extract artifact ZIPs recursively
      - name: Extract Artifact ZIPs Recursively
        shell: pwsh
        run: |
          $version = "${{ env.ARTIFACT_VERSION }}"
          $zipPath = "./artifacts/artifacts_$version.zip"
          $extractPath = "$env:TEMP\artifact_extract_$($env:GITHUB_RUN_ID)"
 
          if (-Not (Test-Path $zipPath)) {
            Write-Host "‚ùå Artifact ZIP not found: $zipPath"
            exit 1
          }
 
          if (Test-Path $extractPath) {
            Remove-Item -Recurse -Force $extractPath
          }
          New-Item -ItemType Directory -Force -Path $extractPath | Out-Null
 
          Add-Type -AssemblyName System.IO.Compression.FileSystem
 
          function Expand-ZipRecursively($zipFile, $destDir) {
            Write-Host "üì¶ Extracting $zipFile to $destDir"
            [System.IO.Compression.ZipFile]::ExtractToDirectory($zipFile, $destDir, $true)
 
            # Find nested zips and expand them into their own folders
            Get-ChildItem -Path $destDir -Recurse -Filter *.zip | ForEach-Object {
              $innerZip = $_.FullName
              $innerDest = Join-Path $_.DirectoryName ($_.BaseName + "_unzipped")
              if (-not (Test-Path $innerDest)) {
                New-Item -ItemType Directory -Force -Path $innerDest | Out-Null
              }
              Write-Host "‚û°Ô∏è Expanding nested zip $innerZip to $innerDest"
              [System.IO.Compression.ZipFile]::ExtractToDirectory($innerZip, $innerDest, $true)
              Remove-Item $innerZip -Force
            }
          }
 
          Expand-ZipRecursively $zipPath $extractPath
          Write-Host "‚úÖ Fully extracted artifacts to $extractPath"
 
      # 5Ô∏è‚É£ Deploy APIs dynamically to their paths
      - name: Deploy APIs to Local IIS
        shell: pwsh
        run: |
          $client = "${{ github.event.inputs.client }}"
          $envName = "${{ github.event.inputs.env }}"
          $configPath = ".\configs\$client\$envName\config.json"
          $config = Get-Content $configPath | ConvertFrom-Json
 
          $iisRoot = $config.appRootPath
          if (-Not (Test-Path $iisRoot)) {
            New-Item -ItemType Directory -Path $iisRoot
          }
 
          foreach ($api in $config.apiNames) {
            $sourcePath = Join-Path "$env:TEMP\artifact_extract_$($env:GITHUB_RUN_ID)" $api
            $destPath = Join-Path $iisRoot $api
 
            if (-Not (Test-Path $destPath)) {
              New-Item -ItemType Directory -Path $destPath
            }
 
            Write-Host "üöÄ Deploying API '$api' from '$sourcePath' to '$destPath'"
            # Dummy copy, replace with MSDeploy for real deployment
            Copy-Item -Path "$sourcePath\*" -Destination $destPath -Recurse -Force
          }
 
      # 6Ô∏è‚É£ Post-deployment step (placeholder)
      - name: Post Deployment Step
        run: Write-Host "‚úÖ Post-deployment step executed"
 
      # 7Ô∏è‚É£ Deployment complete
      - name: Deployment Complete
        run: Write-Host "üéâ Deployment complete for client ${{ github.event.inputs.client }} version ${{ env.ARTIFACT
 
