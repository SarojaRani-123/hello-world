name: Deploy with MSDeploy
 
on:
  workflow_dispatch:
    inputs:
      client:
        description: "Client Name"
        required: true
      env:
        description: "Environment (pp, uat, prod, etc.)"
        required: true
      version:
        description: "Artifacts Version Folder (e.g. artifacts_v8.2025.06)"
        required: true
 
jobs:
  deploy:
    runs-on: windows-latest
 
    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3
 
      # 2. Load config for given client/env
      - name: Load client config
        id: load-config
        shell: pwsh
        run: |
          $configPath = "configs/${{ github.event.inputs.client }}/${{ github.event.inputs.env }}/config.json"
          if (!(Test-Path $configPath)) {
            Write-Error "Config file not found at $configPath"
            exit 1
          }
          $config = Get-Content $configPath | ConvertFrom-Json
          echo "target_server=$($config.target_server)" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "site_name=$($config.site_name)" | Out-File -FilePath $env:GITHUB_ENV -Append
 
      # 3. Set variables
      - name: Set variables
        id: vars
        shell: pwsh
        run: |
          echo "ARTIFACTS_DIR=${{ github.workspace }}/artifacts/${{ github.event.inputs.version }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "EXTRACT_DIR=${{ github.workspace }}/extracted" | Out-File -FilePath $env:GITHUB_ENV -Append
 
      # 4. Extract all zip files inside artifacts/version
      - name: Extract artifacts
        shell: pwsh
        run: |
          $artifactDir = "${{ env.ARTIFACTS_DIR }}"
          $extractDir = "${{ env.EXTRACT_DIR }}"
 
          if (!(Test-Path $artifactDir)) {
            Write-Error "Artifacts folder not found: $artifactDir"
            exit 1
          }
 
          New-Item -ItemType Directory -Force -Path $extractDir | Out-Null
 
          Get-ChildItem -Path $artifactDir -Filter *.zip | ForEach-Object {
            $dest = Join-Path $extractDir ($_.BaseName)
            New-Item -ItemType Directory -Force -Path $dest | Out-Null
            Expand-Archive -Path $_.FullName -DestinationPath $dest -Force
            Write-Output "Extracted $($_.Name) to $dest"
          }
 
      # 5. Deploy with msdeploy
      - name: Deploy with MSDeploy
        shell: pwsh
        run: |
          $extractDir = "${{ env.EXTRACT_DIR }}"
          Get-ChildItem -Path $extractDir -Directory | ForEach-Object {
            $packagePath = $_.FullName
            Write-Output "Deploying $($_.Name) from $packagePath ..."
            & "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe" `
              -verb:sync `
              -source:contentPath="$packagePath" `
              -dest:contentPath="${{ env.site_name }}",computerName="https://${{ env.target_server }}/msdeploy.axd",userName="xxx",password="yyy",authtype="Basic" `
              -allowUntrusted
          }
 
      # 6. Cleanup extracted zips to save space
      - name: Cleanup extracted files
        if: always()
        shell: pwsh
        run: |
          if (Test-Path "${{ env.EXTRACT_DIR }}") {
            Remove-Item -Recurse -Force "${{ env.EXTRACT_DIR }}"
            Write-Output "Cleaned up extracted files."
          }
 
      # 7. Finish
      - name: Deployment completed
        run: echo "Deployment completed for client=${{ github.event.inputs.client }}, env=${{ github.event.inputs.env }}, version=${{ github.event.inputs.version }}"
