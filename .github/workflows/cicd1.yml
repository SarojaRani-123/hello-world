name: Deploy Application
 
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Artifact version (example: v8.2025.06)"
        required: true
      environment:
        description: "Client environment (example: dev, pp, prod)"
        required: true
      client: 
        description: "Client name"
        required: true
 
jobs:
  deploy:
    runs-on: windows-latest
 
    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4
 
      # 2. Setup MSDeploy
      - name: Setup MSDeploy
        shell: powershell
        run: |
          Write-Output "Setting up MSDeploy..."
 
      # 2️⃣ Load client config
      - name: Load Client Config
        shell: pwsh
        run: |
          $client = "${{ github.event.inputs.client }}"
          $envName = "${{ github.event.inputs.env }}"
          $configPath = ".\configs\$client\$envName\config.json"
          if (Test-Path $configPath) {
              Write-Host "Config loaded for $client in $envName environment"
              $config = Get-Content $configPath | ConvertFrom-Json
              Write-Host "App Root Path: $($config.appRootPath)"
              Write-Host "APIs: $($config.apiNames -join ', ')"
          } else {
              Write-Host "Config not found for $client in $envName environment"
              exit 1
          }
 
      # 4. Extract Artifacts
      - name: Extract Artifacts
        id: extract
        shell: powershell
        run: |
          $versionInput = "${{ github.event.inputs.version }}"
          $artifactDir = Join-Path "${{ github.workspace }}" "artifacts/artifacts_$versionInput"
 
          if (-Not (Test-Path $artifactDir)) {
            Write-Error "Artifacts folder not found: $artifactDir"
            exit 1
          }
 
          Write-Output "Looking for zip files in $artifactDir"
          $zips = Get-ChildItem -Path $artifactDir -Filter *.zip
          if ($zips.Count -eq 0) {
            Write-Error "No zip files found in $artifactDir"
            exit 1
          }
 
          foreach ($zip in $zips) {
            $dest = Join-Path $artifactDir ($zip.BaseName)
            Write-Output "Extracting $($zip.Name) to $dest"
            Expand-Archive -Path $zip.FullName -DestinationPath $dest -Force
          }
 
          echo "artifactDir=$artifactDir" >> $env:GITHUB_OUTPUT
 
      # 5. Verify Extracted
      - name: Verify Extracted
        shell: powershell
        run: |
          $artifactDir = "${{ steps.extract.outputs.artifactDir }}"
          Write-Output "Contents of $artifactDir:"
          Get-ChildItem -Recurse $artifactDir
 
      # 6. Deploy using MSDeploy
      - name: Deploy with MSDeploy
        shell: powershell
        run: |
          $artifactDir = "${{ steps.extract.outputs.artifactDir }}"
          Write-Output "Deploying from $artifactDir with MSDeploy..."
          # Example command
          # & "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe" `
          #   -verb:sync `
          #   -source:contentPath="$artifactDir/gcapp/bin" `
# -dest:auto,computerName="https://target-server:8172/msdeploy.axd",userName="xxx",password="xxx",authtype="Basic"
 
      # 7. Cleanup
      - name: Cleanup Extracted Folders
        if: always()
        shell: powershell
        run: |
          $artifactDir = "${{ steps.extract.outputs.artifactDir }}"
          if (Test-Path $artifactDir) {
            Write-Output "Cleaning up extracted folders inside $artifactDir..."
            Get-ChildItem -Path $artifactDir -Directory | Remove-Item -Recurse -Force
          }
